
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dyizpcoejfpadopfukxr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR5aXpwY29lamZwYWRvcGZ1a3hyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA0MTMxMzEsImV4cCI6MjA1NTk4OTEzMX0.6rWkKFUXglsLw4skKQv86_affkssW25xZwUF6vw_2R4";

// Create a custom fetch implementation with a timeout
const fetchWithTimeout = (url: string | URL | Request, options?: RequestInit, timeout = 10000): Promise<Response> => {
  return Promise.race([
    fetch(url, options),
    new Promise<Response>((_, reject) => 
      setTimeout(() => reject(new Error('Connection timed out')), timeout)
    ).then(() => {
      throw new Error('Connection timed out');
    }) as Promise<Response>
  ]);
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
    },
    global: {
      fetch: fetchWithTimeout as typeof fetch,
    },
  }
);

// Helper function to check Supabase connectivity
export const checkSupabaseConnection = async () => {
  try {
    // Simple health check
    const timeout = 5000;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      signal: controller.signal,
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
      }
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    console.error("Supabase connection check failed:", error);
    return false;
  }
};
